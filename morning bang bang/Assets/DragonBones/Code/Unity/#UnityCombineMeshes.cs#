using System.Collections.Generic;
using System.Linq;
using UnityEngine;

namespace DragonBones
{
    public sealed class UnityEngineMeshCombiner
    {
        public sealed class CombineSlot
        {
            public UnitySlot Slot;
            public CombineInstance CombineInstance;

            public CombineSlot(UnitySlot slot, CombineInstance combineInstance)
            {
                Slot = slot;
                CombineInstance = combineInstance;
            }
        }

        public bool IsCombined { get; private set; } = false;
        public readonly UnityEngineArmatureDisplay BelongsTo;

        private List<CombineSlot> Combines = new();
        private List<CombineInstance> cs;
        private List<MeshBuffer> mbs;

        private MeshFilter meshFilter;

        private MeshBuffer combinedBuffer;

        public UnityEngineMeshCombiner(UnityEngineArmatureDisplay belongsTo)
        {
            BelongsTo = belongsTo;
        }

        public void Combine()
        {
            cs = new List<CombineInstance>();
            mbs = new List<MeshBuffer>();
            combinedBuffer = new MeshBuffer();
            
            foreach (Slot slot in BelongsTo.Armature.Structure.Slots)
            {
                UnitySlot unitySlot = (UnitySlot)slot;
                
                if(unitySlot.IsDisplayingChildArmature()) continue;
                
                Combines.Add(new CombineSlot(unitySlot, new CombineInstance()));

                CombineSlot currentCombine = Combines.Last();

                currentCombine.CombineInstance.mesh = unitySlot.MeshBuffer.sharedMesh;
                currentCombine.CombineInstance.transform = BelongsTo.transform.localToWorldMatrix * BelongsTo.transform.worldToLocalMatrix;
                
                cs.Add(currentCombine.CombineInstance);
                mbs.Add(currentCombine.Slot.MeshBuffer);
                unitySlot.Disable();
            }

            meshFilter = BelongsTo.gameObject.AddComponent<MeshFilter>();
            
            combinedBuffer.SplitFrom(Combines.ToArray());

            BelongsTo.gameObject.AddComponent<MeshRenderer>().material = Combines[0].Slot.CurrentTextureAtlasData.texture;
            meshFilter.sharedMesh = combinedBuffer.sharedMesh;

            IsCombined = true;
        }

        public void Clear() { }

        public void Update()
        {
            combinedBuffer.UpdateFromSplits();
        }

        private int Comparison(CombineInstance x, CombineInstance y)
        {
            if (x.mesh.vertices[0].z < y.mesh.vertices[0].z)
                return 1;
            if(x.mesh.vertices[0].z > y.mesh.vertices[0].z)
                return -1;

            return 0;
        }
    }
}